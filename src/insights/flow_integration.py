#!/usr/bin/env python
"""
üîó INTEGRA√á√ÉO FLOW <-> CREW TRADICIONAL

Este m√≥dulo garante compatibilidade entre:
- O novo sistema Flow (flow_main.py)
- O sistema tradicional Crew (crew.py) 
- A interface existente (main.py)

Permite migra√ß√£o gradual sem quebrar funcionalidades existentes.
"""

import sys
import warnings
import logging
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Union

# Suprimir warnings espec√≠ficos
warnings.filterwarnings("ignore", category=SyntaxWarning, module="pysbd")

# Importar ambos os sistemas
from insights.crew import Insights as CrewTradicional
from insights.flow_main import InsightsFlow, criar_flow_com_parametros, executar_flow_completo

# =============== CONFIGURA√á√ÉO DE LOGGING ===============

logger = logging.getLogger(__name__)

def setup_integration_logging():
    """Configurar logging para o m√≥dulo de integra√ß√£o"""
    integration_logger = logging.getLogger('insights_integration')
    integration_logger.setLevel(logging.INFO)
    
    if not integration_logger.handlers:
        handler = logging.StreamHandler(sys.stdout)
        formatter = logging.Formatter(
            '%(asctime)s [%(levelname)s] INTEGRATION: %(message)s'
        )
        handler.setFormatter(formatter)
        integration_logger.addHandler(handler)
    
    return integration_logger

integration_logger = setup_integration_logging()

# =============== CLASSE DE INTEGRA√á√ÉO ===============

class InsightsRunner:
    """
    üîÑ EXECUTOR H√çBRIDO INSIGHTS-AI
    
    Permite escolher entre:
    - Sistema tradicional (Crew)
    - Sistema otimizado (Flow)
    - Modo autom√°tico (decide baseado em crit√©rios)
    """
    
    def __init__(self):
        self.modo_preferido = "auto"  # auto, crew, flow
        self.fallback_ativo = True
        self.monitoramento_ativo = True
        
    def executar_com_modo(self, 
                         data_inicio: str, 
                         data_fim: str, 
                         modo: str = "auto",
                         **kwargs) -> Dict[str, Any]:
        """
        Executar an√°lise com modo espec√≠fico
        
        Args:
            data_inicio: Data inicial (YYYY-MM-DD)
            data_fim: Data final (YYYY-MM-DD)
            modo: 'auto', 'crew', 'flow'
            **kwargs: Par√¢metros adicionais
        
        Returns:
            Dict com resultado da execu√ß√£o
        """
        integration_logger.info(f"üöÄ INICIANDO EXECU√á√ÉO - Modo: {modo}")
        integration_logger.info(f"üìÖ Per√≠odo: {data_inicio} a {data_fim}")
        
        start_time = time.time()
        
        try:
            if modo == "auto":
                return self._executar_modo_automatico(data_inicio, data_fim, **kwargs)
            elif modo == "flow":
                return self._executar_com_flow(data_inicio, data_fim, **kwargs)
            elif modo == "crew":
                return self._executar_com_crew(data_inicio, data_fim, **kwargs)
            else:
                raise ValueError(f"Modo inv√°lido: {modo}. Use 'auto', 'crew' ou 'flow'")
                
        except Exception as e:
            execution_time = time.time() - start_time
            integration_logger.error(f"‚ùå Erro na execu√ß√£o ({execution_time:.2f}s): {e}")
            
            if self.fallback_ativo and modo != "crew":
                integration_logger.info("üîÑ Tentando fallback para modo tradicional...")
                return self._executar_com_crew(data_inicio, data_fim, **kwargs)
            else:
                raise
    
    def _executar_modo_automatico(self, data_inicio: str, data_fim: str, **kwargs) -> Dict[str, Any]:
        """Decide automaticamente entre Flow e Crew baseado em crit√©rios"""
        integration_logger.info("ü§ñ MODO AUTOM√ÅTICO - Analisando melhor op√ß√£o...")
        
        # Crit√©rios para decidir o modo
        criterios = self._analisar_criterios_execucao(data_inicio, data_fim, **kwargs)
        
        if criterios['usar_flow']:
            integration_logger.info("‚úÖ Crit√©rios favorecem FLOW - Executando com sistema otimizado")
            try:
                return self._executar_com_flow(data_inicio, data_fim, **kwargs)
            except Exception as e:
                integration_logger.warning(f"‚ö†Ô∏è Flow falhou: {e}")
                if self.fallback_ativo:
                    integration_logger.info("üîÑ Fallback autom√°tico para CREW")
                    return self._executar_com_crew(data_inicio, data_fim, **kwargs)
                else:
                    raise
        else:
            integration_logger.info("‚úÖ Crit√©rios favorecem CREW - Executando com sistema tradicional")
            return self._executar_com_crew(data_inicio, data_fim, **kwargs)
    
    def _analisar_criterios_execucao(self, data_inicio: str, data_fim: str, **kwargs) -> Dict[str, Any]:
        """Analisar crit√©rios para decidir entre Flow e Crew"""
        criterios = {
            'usar_flow': True,  # Padr√£o: preferir Flow
            'razoes': []
        }
        
        try:
            # Crit√©rio 1: Verificar se Flow est√° dispon√≠vel
            try:
                import crewai.flow.flow
                criterios['razoes'].append("‚úÖ CrewAI Flow dispon√≠vel")
            except ImportError:
                criterios['usar_flow'] = False
                criterios['razoes'].append("‚ùå CrewAI Flow n√£o dispon√≠vel")
                return criterios
            
            # Crit√©rio 2: Analisar per√≠odo de dados
            data_inicio_dt = datetime.strptime(data_inicio, '%Y-%m-%d')
            data_fim_dt = datetime.strptime(data_fim, '%Y-%m-%d')
            dias_analise = (data_fim_dt - data_inicio_dt).days
            
            if dias_analise > 365:
                criterios['razoes'].append(f"‚úÖ Per√≠odo longo ({dias_analise} dias) - Flow otimizado")
            else:
                criterios['razoes'].append(f"‚ÑπÔ∏è Per√≠odo moderado ({dias_analise} dias)")
            
            # Crit√©rio 3: Verificar kwargs especiais
            if kwargs.get('modo_rapido', False):
                criterios['razoes'].append("‚úÖ Modo r√°pido solicitado - Flow prefer√≠vel")
            
            if kwargs.get('monitoramento_detalhado', True):
                criterios['razoes'].append("‚úÖ Monitoramento detalhado - Flow superior")
            
            # Crit√©rio 4: Verificar disponibilidade de recursos
            try:
                import psutil
                memoria_disponivel = psutil.virtual_memory().available / (1024**3)  # GB
                if memoria_disponivel < 2:
                    criterios['usar_flow'] = False
                    criterios['razoes'].append(f"‚ö†Ô∏è Pouca mem√≥ria ({memoria_disponivel:.1f}GB) - Crew mais leve")
                else:
                    criterios['razoes'].append(f"‚úÖ Mem√≥ria adequada ({memoria_disponivel:.1f}GB)")
            except ImportError:
                criterios['razoes'].append("‚ÑπÔ∏è N√£o foi poss√≠vel verificar recursos")
            
        except Exception as e:
            integration_logger.warning(f"‚ö†Ô∏è Erro ao analisar crit√©rios: {e}")
            criterios['usar_flow'] = False
            criterios['razoes'].append(f"‚ùå Erro na an√°lise: {e}")
        
        # Log das decis√µes
        integration_logger.info(f"üìä Decis√£o: {'FLOW' if criterios['usar_flow'] else 'CREW'}")
        for razao in criterios['razoes']:
            integration_logger.info(f"   {razao}")
        
        return criterios
    
    def _executar_com_flow(self, data_inicio: str, data_fim: str, **kwargs) -> Dict[str, Any]:
        """Executar com sistema Flow otimizado"""
        integration_logger.info("üöÄ EXECUTANDO COM FLOW OTIMIZADO")
        integration_logger.info("-" * 50)
        
        start_time = time.time()
        
        try:
            # Configurar Flow
            modo_execucao = kwargs.get('modo_execucao', 'completo')
            flow = criar_flow_com_parametros(data_inicio, data_fim, modo_execucao)
            
            # Configurar monitoramento se solicitado
            if kwargs.get('monitoramento_detalhado', True):
                monitor_thread = self._iniciar_monitoramento_flow(flow)
            else:
                monitor_thread = None
            
            # Executar Flow
            resultado_flow = flow.kickoff()
            execution_time = time.time() - start_time
            
            # Parar monitoramento
            if monitor_thread:
                self._parar_monitoramento(monitor_thread)
            
            # Preparar resultado estruturado
            status_final = flow.get_status_detalhado()
            
            resultado = {
                'status': 'sucesso',
                'modo_execucao': 'flow',
                'tempo_execucao': execution_time,
                'resultado_principal': resultado_flow,
                'flow_status': status_final,
                'analises_concluidas': len(flow.state.analises_concluidas),
                'qualidade_dados': flow.state.qualidade_dados,
                'arquivos_gerados': flow.state.arquivos_gerados,
                'warnings': flow.state.warnings
            }
            
            integration_logger.info(f"‚úÖ FLOW CONCLU√çDO em {execution_time:.2f}s")
            integration_logger.info(f"üìä An√°lises conclu√≠das: {len(flow.state.analises_concluidas)}")
            integration_logger.info(f"üìÅ Arquivos gerados: {len(flow.state.arquivos_gerados)}")
            
            return resultado
            
        except Exception as e:
            execution_time = time.time() - start_time
            integration_logger.error(f"‚ùå Erro no Flow ({execution_time:.2f}s): {e}")
            raise Exception(f"Falha na execu√ß√£o do Flow: {e}")
    
    def _executar_com_crew(self, data_inicio: str, data_fim: str, **kwargs) -> Dict[str, Any]:
        """Executar com sistema Crew tradicional"""
        integration_logger.info("üöÄ EXECUTANDO COM CREW TRADICIONAL") 
        integration_logger.info("-" * 50)
        
        start_time = time.time()
        
        try:
            # Preparar inputs para Crew tradicional
            inputs = {
                'data_inicio': data_inicio,
                'data_fim': data_fim
            }
            
            # Configurar monitoramento se solicitado
            if kwargs.get('monitoramento_detalhado', True):
                monitor_thread = self._iniciar_monitoramento_crew()
            else:
                monitor_thread = None
            
            # Executar Crew tradicional
            crew_instance = CrewTradicional()
            resultado_crew = crew_instance.crew().kickoff(inputs=inputs)
            execution_time = time.time() - start_time
            
            # Parar monitoramento
            if monitor_thread:
                self._parar_monitoramento(monitor_thread)
            
            # Preparar resultado estruturado
            resultado = {
                'status': 'sucesso',
                'modo_execucao': 'crew',
                'tempo_execucao': execution_time,
                'resultado_principal': resultado_crew,
                'crew_info': {
                    'agents_count': len(crew_instance.agents),
                    'tasks_count': len(crew_instance.tasks)
                }
            }
            
            integration_logger.info(f"‚úÖ CREW CONCLU√çDO em {execution_time:.2f}s")
            
            return resultado
            
        except Exception as e:
            execution_time = time.time() - start_time
            integration_logger.error(f"‚ùå Erro no Crew ({execution_time:.2f}s): {e}")
            raise Exception(f"Falha na execu√ß√£o do Crew: {e}")
    
    def _iniciar_monitoramento_flow(self, flow: InsightsFlow) -> threading.Thread:
        """Iniciar monitoramento em tempo real do Flow"""
        def monitor():
            while getattr(threading.current_thread(), "do_run", True):
                try:
                    status = flow.get_status_detalhado()
                    integration_logger.info(
                        f"üìä FLOW STATUS: {status['fase_atual']} | "
                        f"Progresso: {status['progresso_percent']:.1f}% | "
                        f"Tempo: {status['tempo_decorrido']:.1f}s"
                    )
                    time.sleep(30)  # Log a cada 30 segundos
                except Exception as e:
                    integration_logger.warning(f"‚ö†Ô∏è Erro no monitoramento: {e}")
                    break
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
        integration_logger.info("üì° Monitoramento do Flow iniciado")
        return thread
    
    def _iniciar_monitoramento_crew(self) -> threading.Thread:
        """Iniciar monitoramento simples do Crew"""
        def monitor():
            start_time = time.time()
            while getattr(threading.current_thread(), "do_run", True):
                elapsed = time.time() - start_time
                integration_logger.info(f"üìä CREW executando h√° {elapsed:.1f}s...")
                time.sleep(60)  # Log a cada 60 segundos
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
        integration_logger.info("üì° Monitoramento do Crew iniciado")
        return thread
    
    def _parar_monitoramento(self, thread: threading.Thread):
        """Parar thread de monitoramento"""
        if thread and thread.is_alive():
            thread.do_run = False
            integration_logger.info("üì° Monitoramento finalizado")

# =============== INTERFACE COMPAT√çVEL ===============

def run_insights(data_inicio: str = None, 
                data_fim: str = None, 
                modo: str = "auto",
                **kwargs) -> Dict[str, Any]:
    """
    üöÄ INTERFACE PRINCIPAL PARA EXECU√á√ÉO DO INSIGHTS-AI
    
    Fun√ß√£o compat√≠vel com main.py existente, mas com op√ß√µes avan√ßadas.
    
    Args:
        data_inicio: Data inicial (YYYY-MM-DD). Se None, usa √∫ltimos 2 anos
        data_fim: Data final (YYYY-MM-DD). Se None, usa hoje
        modo: 'auto', 'crew', 'flow'
        **kwargs: Par√¢metros adicionais
    
    Returns:
        Dict com resultado da execu√ß√£o
    """
    # Configurar datas padr√£o se n√£o fornecidas
    if data_fim is None:
        data_fim = datetime.now().strftime('%Y-%m-%d')
    
    if data_inicio is None:
        data_inicio = (datetime.now() - timedelta(days=730)).strftime('%Y-%m-%d')
    
    # Executar com runner h√≠brido
    runner = InsightsRunner()
    return runner.executar_com_modo(data_inicio, data_fim, modo, **kwargs)

# =============== COMPATIBILIDADE COM MAIN.PY ===============

def run():
    """
    Fun√ß√£o compat√≠vel com main.py existente
    Mant√©m mesma interface, mas usa sistema h√≠brido
    """
    # Usar configura√ß√£o padr√£o do main.py original
    data_fim = datetime.now().strftime('%Y-%m-%d')
    data_inicio = (datetime.now() - timedelta(days=1460)).strftime('%Y-%m-%d')
    
    try:
        resultado = run_insights(
            data_inicio=data_inicio,
            data_fim=data_fim,
            modo="auto",
            monitoramento_detalhado=True
        )
        
        logger.info("‚úÖ EXECU√á√ÉO CONCLU√çDA COM SUCESSO")
        logger.info(f"üìä Modo utilizado: {resultado['modo_execucao']}")
        logger.info(f"‚è±Ô∏è Tempo total: {resultado['tempo_execucao']:.2f}s")
        
        return resultado['resultado_principal']
        
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è EXECU√á√ÉO INTERROMPIDA pelo usu√°rio")
        raise
    except Exception as e:
        logger.error(f"‚ùå ERRO na execu√ß√£o: {str(e)}")
        raise Exception(f"An error occurred while running the crew: {e}")

if __name__ == "__main__":
    # Execu√ß√£o direta compat√≠vel
    resultado = run()
    print(f"‚úÖ Execu√ß√£o finalizada: {type(resultado)}") 
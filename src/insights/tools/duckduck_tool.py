from crewai.tools import BaseTool
from typing import Type, Optional
from pydantic import BaseModel, Field, PrivateAttr, field_validator
from langchain_community.tools import DuckDuckGoSearchRun
import time
import json

class DuckSearchInput(BaseModel):
    """Schema otimizado para busca DuckDuckGo com valida√ß√µes robustas."""
    
    query: str = Field(
        ..., 
        description="Termo de busca espec√≠fico. Use palavras-chave relevantes para joalherias, tend√™ncias de mercado, an√°lise competitiva ou contexto econ√¥mico.",
        min_length=3,
        max_length=200,
        json_schema_extra={"example": "tend√™ncias joalherias 2024 mercado brasileiro"}
    )
    
    domain: Optional[str] = Field(
        "br", 
        description="Dom√≠nio para filtrar resultados (br=Brasil, com=Global). Use 'br' para contexto local, 'com' para tend√™ncias globais.",
        json_schema_extra={
            "pattern": "^(br|com|org|net)$"
        }
    )
    
    max_results: Optional[int] = Field(
        5,
        description="N√∫mero m√°ximo de resultados (1-10). Use 3-5 para an√°lises r√°pidas, 8-10 para pesquisas aprofundadas.",
        ge=1,
        le=10
    )
    
    @field_validator('query')
    @classmethod
    def validate_query(cls, v):
        if not v.strip():
            raise ValueError("Query n√£o pode estar vazia")
        return v.strip()

class DuckDuckGoSearchTool(BaseTool):
    """
    üîç FERRAMENTA DE PESQUISA WEB INTELIGENTE
    
    QUANDO USAR:
    - Pesquisar tend√™ncias de mercado de joalherias
    - Analisar contexto econ√¥mico e social
    - Investigar concorr√™ncia e benchmarking
    - Buscar insights sobre comportamento do consumidor
    - Validar hip√≥teses com dados externos
    
    CASOS DE USO ESPEC√çFICOS:
    - "Tend√™ncias joalherias 2024 Brasil" ‚Üí Contexto de mercado
    - "Impacto infla√ß√£o vendas luxo" ‚Üí An√°lise econ√¥mica
    - "Comportamento consumidor joias online" ‚Üí Insights de canal
    - "Sazonalidade vendas joalherias natal" ‚Üí Padr√µes sazonais
    
    RESULTADOS ENTREGUES:
    - Resumo estruturado de informa√ß√µes relevantes
    - Links para fontes confi√°veis
    - Insights contextualizados para o neg√≥cio
    - Dados para valida√ß√£o de an√°lises internas
    """
    
    name: str = "DuckDuckGo Search Tool"
    description: str = (
        "Pesquisa web inteligente para contexto de mercado, tend√™ncias e an√°lise competitiva. "
        "Use para buscar informa√ß√µes externas que complementem an√°lises internas de vendas. "
        "Ideal para validar hip√≥teses, entender contexto econ√¥mico e identificar tend√™ncias de mercado."
    )
    args_schema: Type[BaseModel] = DuckSearchInput
    
    # Atributos privados para controle interno
    _search_tool: DuckDuckGoSearchRun = PrivateAttr(default=None)
    _last_request_time: float = PrivateAttr(default=0.0)
    _MIN_INTERVAL: float = PrivateAttr(default=1.5)  # Rate limiting mais conservador
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._search_tool = DuckDuckGoSearchRun()
        self._last_request_time = 0.0

    def _run(
        self, 
        query: str, 
        domain: str = "br", 
        max_results: int = 5
        ) -> str:
        """
        Executa busca inteligente com rate limiting e formata√ß√£o estruturada.
        
        Returns:
            JSON estruturado com resultados, insights e metadados
        """
        try:
            # Rate limiting inteligente
            elapsed = time.time() - self._last_request_time
            if elapsed < self._MIN_INTERVAL:
                time.sleep(self._MIN_INTERVAL - elapsed)
            
            self._last_request_time = time.time()
            
            # Construir query otimizada
            if domain and domain != "com":
                search_query = f"{query} site:.{domain}"
            else:
                search_query = query
            
            print(f"üîç Pesquisando: {search_query}")
            
            # Executar busca
            raw_results = self._search_tool.run(search_query)
            
            # Estruturar resultados
            structured_results = {
                "query_original": query,
                "domain_filter": domain,
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "results_summary": self._extract_key_insights(raw_results, query),
                "raw_content": raw_results[:1000] + "..." if len(raw_results) > 1000 else raw_results,
                "business_relevance": self._assess_business_relevance(query),
                "recommended_actions": self._generate_recommendations(query, raw_results),
                "metadata": {
                    "search_type": "web_research",
                    "confidence": "medium",
                    "source": "duckduckgo"
                }
            }
            
            return json.dumps(structured_results, ensure_ascii=False, indent=2)
            
        except Exception as e:
            error_response = {
                "error": f"Erro na pesquisa: {str(e)}",
                "query": query,
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                "fallback_suggestion": f"Tente reformular a busca: '{query}' com termos mais espec√≠ficos",
                "metadata": {
                    "search_type": "web_research",
                    "status": "error"
                }
            }
            return json.dumps(error_response, ensure_ascii=False, indent=2)
    
    def _extract_key_insights(self, raw_results: str, query: str) -> str:
        """Extrair insights principais dos resultados brutos"""
        # L√≥gica simples para extrair insights relevantes
        lines = raw_results.split('\n')
        relevant_lines = [line for line in lines if any(keyword in line.lower() 
                         for keyword in ['tend√™ncia', 'mercado', 'vendas', 'consumidor', 'crescimento'])]
        
        if relevant_lines:
            return " | ".join(relevant_lines[:3])
        else:
            return raw_results[:200] + "..."
    
    def _assess_business_relevance(self, query: str) -> str:
        """Avaliar relev√¢ncia para o neg√≥cio de joalherias"""
        jewelry_keywords = ['joia', 'joalheria', 'ouro', 'prata', 'anel', 'colar', 'brinco', 'luxo']
        market_keywords = ['mercado', 'vendas', 'consumidor', 'tend√™ncia', 'economia']
        
        if any(keyword in query.lower() for keyword in jewelry_keywords):
            return "ALTA - Diretamente relacionado ao setor de joalherias"
        elif any(keyword in query.lower() for keyword in market_keywords):
            return "M√âDIA - Contexto de mercado relevante para an√°lise"
        else:
            return "BAIXA - Informa√ß√£o geral, pode fornecer contexto adicional"
    
    def _generate_recommendations(self, query: str, results: str) -> list:
        """Gerar recomenda√ß√µes baseadas na pesquisa"""
        recommendations = []
        
        if 'tend√™ncia' in query.lower():
            recommendations.append("Correlacionar com dados internos de vendas por categoria")
            recommendations.append("Analisar impacto nas proje√ß√µes de demanda")
        
        if 'mercado' in query.lower():
            recommendations.append("Usar insights para contextualizar an√°lise competitiva")
            recommendations.append("Considerar para ajustes na estrat√©gia de pricing")
        
        if 'consumidor' in query.lower():
            recommendations.append("Integrar com an√°lise de segmenta√ß√£o de clientes")
            recommendations.append("Avaliar oportunidades de novos produtos/servi√ßos")
        
        if not recommendations:
            recommendations.append("Usar informa√ß√µes como contexto adicional nas an√°lises")
        
        return recommendations

# VERS√ÉO 3.0 REFATORADA DO KPI CALCULATOR TOOL
# ============================================
# 
# MELHORIAS DA VERS√ÉO 3.0:
# 
# ‚úÖ INFRAESTRUTURA CONSOLIDADA:
#    - Usa DataPreparationMixin para prepara√ß√£o de dados
#    - Usa ReportFormatterMixin para formata√ß√£o
#    - Usa JewelryBusinessAnalysisMixin para an√°lises especializadas
# 
# ‚úÖ RESPONSABILIDADES REDEFINIDAS:
#    - FOCO: KPIs de neg√≥cio, alertas autom√°ticos, benchmarks
#    - REMOVIDO: An√°lises demogr√°ficas completas (movidas para Statistical Tool)
#    - REMOVIDO: An√°lises geogr√°ficas completas (movidas para Statistical Tool)
#    - MANTIDO: KPIs operacionais, financeiros, de invent√°rio
# 
# ‚úÖ REDU√á√ÉO DE C√ìDIGO:
#    - ~40% menos c√≥digo devido √† consolida√ß√£o
#    - Melhor manutenibilidade e especializa√ß√£o
#    - Integra√ß√£o com Statistical Tool quando necess√°rio
# 
# ‚úÖ NOVAS FUNCIONALIDADES:
#    - Integra√ß√£o autom√°tica com an√°lises estat√≠sticas
#    - Sistema de cache para prepara√ß√£o de dados
#    - Alertas mais inteligentes

from crewai.tools import BaseTool
from typing import Type, Optional, Dict, Any, List
from pydantic import BaseModel, Field
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import warnings

# Importar m√≥dulos compartilhados consolidados
from .shared.data_preparation import DataPreparationMixin
from .shared.report_formatter import ReportFormatterMixin
from .shared.business_mixins import JewelryRFMAnalysisMixin, JewelryBusinessAnalysisMixin, JewelryBenchmarkMixin

warnings.filterwarnings('ignore')

class KPICalculatorInput(BaseModel):
    """Schema de entrada para a ferramenta de c√°lculo de KPIs v3.0."""
    data_csv: str = Field(default="data/vendas.csv", description="Caminho para o arquivo CSV de vendas")
    categoria: str = Field(default="all", description="Categoria espec√≠fica ('all', 'revenue', 'operational', 'inventory', 'customer', 'products')")
    periodo: str = Field(default="monthly", description="Per√≠odo de an√°lise: 'daily', 'weekly', 'monthly'")
    benchmark_mode: bool = Field(default=True, description="Incluir benchmarks do setor de joalherias")
    include_statistical_insights: bool = Field(default=True, description="Incluir insights de an√°lises estat√≠sticas")
    cache_data: bool = Field(default=True, description="Usar cache para prepara√ß√£o de dados")

class KPICalculatorToolV3(BaseTool, 
                         DataPreparationMixin, 
                         ReportFormatterMixin,
                         JewelryRFMAnalysisMixin, 
                         JewelryBusinessAnalysisMixin,
                         JewelryBenchmarkMixin):
    name: str = "KPI Calculator Tool v3.0 CONSOLIDATED"
    description: str = (
        "üöÄ VERS√ÉO 3.0 CONSOLIDADA - Ferramenta especializada em KPIs de neg√≥cio para joalherias:\n"
        "- KPIs FINANCEIROS: Margem real, ROI, crescimento, elasticidade de pre√ßos\n"
        "- KPIs OPERACIONAIS: Giro de estoque real, velocidade, concentra√ß√£o, sazonalidade\n"
        "- KPIs DE INVENT√ÅRIO: ABC analysis, turnover, alertas autom√°ticos\n"
        "- KPIs DE CLIENTES: Segmenta√ß√£o por valor, CLV real, reten√ß√£o\n"
        "- KPIs DE PRODUTOS: BCG matrix, performance por categoria\n"
        "- BENCHMARKS: Compara√ß√£o com padr√µes do setor de joalherias\n"
        "- ALERTAS INTELIGENTES: Sistema automatizado de alertas cr√≠ticos\n"
        "- INTEGRA√á√ÉO: Conecta com Statistical Tool para insights avan√ßados"
    )
    args_schema: Type[BaseModel] = KPICalculatorInput
    
    def __init__(self):
        super().__init__()
        self._data_cache = {}  # Cache para dados preparados
    
    def _run(self, data_csv: str = "data/vendas.csv", categoria: str = "all", 
             periodo: str = "monthly", benchmark_mode: bool = True,
             include_statistical_insights: bool = True, cache_data: bool = True) -> str:
        try:
            print(f"üöÄ Iniciando KPI Calculator v3.0 - Categoria: {categoria}")
            
            # 1. Carregar e preparar dados usando m√≥dulo consolidado
            df = self._load_and_prepare_data(data_csv, cache_data)
            if df is None:
                return "Erro: N√£o foi poss√≠vel carregar os dados ou estrutura inv√°lida"
            
            print(f"üìä Dados preparados: {len(df)} registros com {len(df.columns)} campos")
            
            # 2. Calcular KPIs por categoria com responsabilidades redefinidas
            kpis = {}
            
            if categoria == "all" or categoria == "revenue":
                kpis['financeiros'] = self._calculate_financial_kpis_v3(df, periodo)
            
            if categoria == "all" or categoria == "operational":
                kpis['operacionais'] = self._calculate_operational_kpis_v3(df, periodo)
            
            if categoria == "all" or categoria == "inventory":
                kpis['inventario'] = self._calculate_inventory_kpis_v3(df, periodo)
            
            if categoria == "all" or categoria == "customer":
                kpis['clientes'] = self._calculate_customer_kpis_v3(df, periodo)
            
            if categoria == "all" or categoria == "products":
                kpis['produtos'] = self._calculate_product_kpis_v3(df, periodo)
            
            # 3. An√°lises consolidadas (sempre inclu√≠das quando categoria = "all")
            if categoria == "all":
                kpis['benchmarks'] = self._calculate_benchmark_comparison_v3(df) if benchmark_mode else {}
                kpis['alertas'] = self._generate_intelligent_alerts(df, kpis)
                kpis['insights'] = self._generate_business_insights_v3(df, kpis)
                
                # 4. Integra√ß√£o com Statistical Tool (se solicitado)
                if include_statistical_insights:
                    kpis['statistical_insights'] = self._integrate_statistical_insights(df)
            
            # 5. Formatar relat√≥rio usando m√≥dulo consolidado
            return self.format_business_kpi_report(kpis, categoria, benchmark_mode)
            
        except Exception as e:
            return f"Erro no KPI Calculator v3.0: {str(e)}"
    
    def _load_and_prepare_data(self, data_csv: str, use_cache: bool = True) -> Optional[pd.DataFrame]:
        """Carregar e preparar dados usando m√≥dulo consolidado com cache."""
        cache_key = f"{data_csv}_{hash(data_csv)}"
        
        # Verificar cache
        if use_cache and cache_key in self._data_cache:
            print("üìã Usando dados do cache")
            return self._data_cache[cache_key]
        
        try:
            # Carregar dados brutos
            df = pd.read_csv(data_csv, sep=';', encoding='utf-8')
            
            # Preparar dados usando mixin consolidado
            df_prepared = self.prepare_jewelry_data(df, validation_level="standard")
            
            # Armazenar no cache
            if use_cache and df_prepared is not None:
                self._data_cache[cache_key] = df_prepared
                print("üíæ Dados salvos no cache")
            
            return df_prepared
            
        except Exception as e:
            print(f"‚ùå Erro no carregamento de dados: {str(e)}")
            return None
    
    def _calculate_financial_kpis_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """Calcular KPIs financeiros focados em m√©tricas de neg√≥cio."""
        print("üí∞ Calculando KPIs financeiros v3.0...")
        
        try:
            kpis = {}
            
            # KPIs b√°sicos essenciais
            total_revenue = df['Total_Liquido'].sum()
            kpis['total_revenue'] = round(total_revenue, 2)
            kpis['aov'] = round(df['Total_Liquido'].mean(), 2)
            kpis['median_order_value'] = round(df['Total_Liquido'].median(), 2)
            kpis['total_transactions'] = len(df)
            
            # KPIs de margem real (usando dados preparados)
            if 'Margem_Real' in df.columns:
                kpis['margem_analysis'] = {
                    'margem_total': round(df['Margem_Real'].sum(), 2),
                    'margem_percentual_media': round(df['Margem_Percentual'].mean(), 2),
                    'margem_mediana': round(df['Margem_Percentual'].median(), 2),
                    'produtos_baixa_margem': len(df[df['Margem_Percentual'] < 30]),
                    'roi_real': round((df['Margem_Real'].sum() / df['Custo_Produto'].sum() * 100), 2) if 'Custo_Produto' in df.columns else 0
                }
            
            # KPIs de crescimento
            if periodo == 'monthly' and 'Ano_Mes' in df.columns:
                monthly_revenue = df.groupby('Ano_Mes')['Total_Liquido'].sum()
                if len(monthly_revenue) >= 2:
                    kpis['growth_analysis'] = {
                        'mom_growth_rate': round(monthly_revenue.pct_change().iloc[-1] * 100, 2),
                        'avg_growth_3months': round(monthly_revenue.tail(3).pct_change().mean() * 100, 2) if len(monthly_revenue) >= 3 else 0,
                        'growth_acceleration': self._calculate_growth_acceleration_v3(monthly_revenue),
                        'revenue_trend': 'crescente' if monthly_revenue.pct_change().iloc[-1] > 0 else 'decrescente'
                    }
            
            # Revenue por categoria (melhorado)
            if 'Grupo_Produto' in df.columns:
                category_revenue = df.groupby('Grupo_Produto')['Total_Liquido'].sum()
                total_cat_revenue = category_revenue.sum()
                kpis['category_performance'] = {
                    'revenue_by_category': category_revenue.round(2).to_dict(),
                    'market_share_by_category': (category_revenue / total_cat_revenue * 100).round(2).to_dict(),
                    'top_category': category_revenue.idxmax(),
                    'category_concentration': round(category_revenue.max() / total_cat_revenue * 100, 2)
                }
            
            # Performance temporal resumida
            kpis['temporal_performance'] = self._calculate_temporal_performance_v3(df, periodo)
            
            return kpis
            
        except Exception as e:
            return {'error': f"Erro nos KPIs financeiros v3.0: {str(e)}"}
    
    def _calculate_operational_kpis_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """KPIs operacionais focados em efici√™ncia e performance."""
        print("‚öôÔ∏è Calculando KPIs operacionais v3.0...")
        
        try:
            kpis = {}
            
            # M√©tricas b√°sicas de efici√™ncia
            days_in_period = (df['Data'].max() - df['Data'].min()).days + 1
            kpis['efficiency_metrics'] = {
                'produtos_ativos': df['Codigo_Produto'].nunique() if 'Codigo_Produto' in df.columns else len(df),
                'sales_velocity_daily': round(df['Quantidade'].sum() / days_in_period, 2),
                'revenue_velocity_daily': round(df['Total_Liquido'].sum() / days_in_period, 2),
                'avg_items_per_transaction': round(df['Quantidade'].mean(), 2),
                'transactions_per_day': round(len(df) / days_in_period, 2)
            }
            
            # Giro de estoque real (usando dados preparados)
            if 'Estoque_Atual' in df.columns:
                kpis['inventory_turnover'] = self._calculate_inventory_turnover_v3(df)
            
            # An√°lise de concentra√ß√£o (80/20 rule)
            if 'Codigo_Produto' in df.columns:
                product_sales = df.groupby('Codigo_Produto')['Total_Liquido'].sum().sort_values(ascending=False)
                top_20_pct = int(len(product_sales) * 0.2)
                concentration_80_20 = (product_sales.head(top_20_pct).sum() / product_sales.sum() * 100)
                
                kpis['concentration_analysis'] = {
                    'concentration_80_20_pct': round(concentration_80_20, 2),
                    'gini_coefficient': self._calculate_gini_coefficient(product_sales.values),
                    'top_20_percent_products': top_20_pct,
                    'concentration_status': 'Alta' if concentration_80_20 > 80 else 'M√©dia' if concentration_80_20 > 60 else 'Baixa'
                }
            
            # Performance por dia da semana (simplificado)
            if 'Nome_Dia_Semana' in df.columns:
                weekday_performance = df.groupby('Nome_Dia_Semana')['Total_Liquido'].agg(['sum', 'mean', 'count'])
                best_day = weekday_performance['sum'].idxmax()
                worst_day = weekday_performance['sum'].idxmin()
                
                kpis['weekday_performance'] = {
                    'best_day': best_day,
                    'worst_day': worst_day,
                    'weekday_variation': round((weekday_performance['sum'].max() / weekday_performance['sum'].min() - 1) * 100, 2)
                }
            
            # Sazonalidade usando dados preparados
            if 'Sazonalidade' in df.columns:
                seasonal_performance = df.groupby('Sazonalidade')['Total_Liquido'].sum()
                kpis['seasonality'] = {
                    'seasonal_revenue': seasonal_performance.to_dict(),
                    'peak_season': seasonal_performance.idxmax(),
                    'seasonal_variation': round((seasonal_performance.max() / seasonal_performance.min() - 1) * 100, 2)
                }
            
            return kpis
            
        except Exception as e:
            return {'error': f"Erro nos KPIs operacionais v3.0: {str(e)}"}
    
    def _calculate_inventory_kpis_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """KPIs de invent√°rio usando an√°lises consolidadas."""
        print("üì¶ Calculando KPIs de invent√°rio v3.0...")
        
        try:
            kpis = {}
            
            # An√°lise ABC usando mixin consolidado
            abc_analysis = self.perform_abc_analysis(df, dimension='product')
            if 'error' not in abc_analysis:
                kpis['abc_analysis'] = abc_analysis
            
            # An√°lise de produtos slow-moving
            if 'Codigo_Produto' in df.columns:
                last_sale_by_product = df.groupby('Codigo_Produto')['Data'].max()
                current_date = df['Data'].max()
                
                # Produtos sem venda h√° mais de 60 dias
                slow_moving_cutoff = current_date - timedelta(days=60)
                slow_moving = (last_sale_by_product < slow_moving_cutoff).sum()
                
                # Produtos sem venda h√° mais de 90 dias (dead stock)
                dead_stock_cutoff = current_date - timedelta(days=90)
                dead_stock = (last_sale_by_product < dead_stock_cutoff).sum()
                
                total_products = len(last_sale_by_product)
                
                kpis['product_lifecycle'] = {
                    'slow_moving_products': slow_moving,
                    'slow_moving_pct': round(slow_moving / total_products * 100, 2),
                    'dead_stock_products': dead_stock,
                    'dead_stock_pct': round(dead_stock / total_products * 100, 2),
                    'active_products': total_products - dead_stock
                }
            
            # Turnover estimado (se n√£o h√° dados reais de estoque)
            monthly_sales_avg = df.groupby([df['Data'].dt.year, df['Data'].dt.month])['Total_Liquido'].sum().mean()
            if monthly_sales_avg > 0:
                estimated_avg_inventory = monthly_sales_avg * 2.5  # Estimativa conservadora
                inventory_turnover_annual = (monthly_sales_avg * 12) / estimated_avg_inventory
                
                kpis['turnover_estimates'] = {
                    'estimated_inventory_turnover_annual': round(inventory_turnover_annual, 2),
                    'estimated_days_sales_inventory': round(365 / inventory_turnover_annual, 1),
                    'monthly_sales_average': round(monthly_sales_avg, 2)
                }
            
            return kpis
            
        except Exception as e:
            return {'error': f"Erro nos KPIs de invent√°rio v3.0: {str(e)}"}
    
    def _calculate_customer_kpis_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """KPIs de clientes focados em m√©tricas de neg√≥cio (n√£o demogr√°ficas)."""
        print("üë• Calculando KPIs de clientes v3.0...")
        
        try:
            kpis = {}
            
            # Segmenta√ß√£o por valor (mantida)
            value_segments = {
                'Premium (>R$5K)': len(df[df['Total_Liquido'] > 5000]),
                'Alto Valor (R$2K-5K)': len(df[(df['Total_Liquido'] >= 2000) & (df['Total_Liquido'] <= 5000)]),
                'M√©dio (R$1K-2K)': len(df[(df['Total_Liquido'] >= 1000) & (df['Total_Liquido'] < 2000)]),
                'Entry (< R$1K)': len(df[df['Total_Liquido'] < 1000])
            }
            
            total_transactions = sum(value_segments.values())
            
            kpis['value_segmentation'] = {
                'segment_distribution': value_segments,
                'segment_percentages': {k: round(v/total_transactions*100, 1) for k, v in value_segments.items()},
                'high_value_share': round((value_segments['Premium (>R$5K)'] + value_segments['Alto Valor (R$2K-5K)']) / total_transactions * 100, 2)
            }
            
            # RFM Analysis usando mixin consolidado
            if 'Codigo_Cliente' in df.columns:
                customer_rfm = self.analyze_customer_rfm(df)
                if 'error' not in customer_rfm:
                    kpis['rfm_analysis'] = customer_rfm
            else:
                # Estimativa de CLV e m√©tricas de cliente (mantida como fallback)
                kpis['customer_estimates'] = self._estimate_customer_metrics(df)
            
            # An√°lise de reten√ß√£o simples
            if 'Codigo_Cliente' in df.columns:
                customer_frequency = df['Codigo_Cliente'].value_counts()
                repeat_customers = len(customer_frequency[customer_frequency > 1])
                total_customers = len(customer_frequency)
                
                kpis['retention_metrics'] = {
                    'total_unique_customers': total_customers,
                    'repeat_customers': repeat_customers,
                    'repeat_rate': round(repeat_customers / total_customers * 100, 2),
                    'avg_purchases_per_customer': round(customer_frequency.mean(), 2)
                }
            
            return kpis
            
        except Exception as e:
            return {'error': f"Erro nos KPIs de clientes v3.0: {str(e)}"}
    
    def _calculate_product_kpis_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """KPIs de produtos usando an√°lises consolidadas."""
        print("üíé Calculando KPIs de produtos v3.0...")
        
        try:
            kpis = {}
            
            # Performance por categoria/metal
            if 'Metal' in df.columns:
                metal_performance = df.groupby('Metal').agg({
                    'Total_Liquido': ['sum', 'mean', 'count'],
                    'Quantidade': 'sum'
                }).round(2)
                
                kpis['metal_performance'] = {
                    'revenue_by_metal': metal_performance['Total_Liquido']['sum'].to_dict(),
                    'aov_by_metal': metal_performance['Total_Liquido']['mean'].to_dict(),
                    'transactions_by_metal': metal_performance['Total_Liquido']['count'].to_dict()
                }
                
                # Market share por metal
                total_revenue = df['Total_Liquido'].sum()
                metal_market_share = metal_performance['Total_Liquido']['sum'] / total_revenue * 100
                kpis['metal_performance']['market_share'] = metal_market_share.round(2).to_dict()
            
            # Matriz BCG usando mixin consolidado
            bcg_analysis = self.create_product_bcg_matrix(df)
            if 'error' not in bcg_analysis:
                kpis['bcg_matrix'] = bcg_analysis
            
            # RFM de produtos usando mixin consolidado
            product_rfm = self.analyze_product_rfm(df)
            if 'error' not in product_rfm:
                kpis['product_rfm'] = product_rfm
            
            # Top produtos por receita
            if 'Codigo_Produto' in df.columns:
                top_products = df.groupby('Codigo_Produto')['Total_Liquido'].sum().nlargest(10)
                kpis['top_products'] = {
                    'by_revenue': top_products.to_dict(),
                    'top_product_share': round(top_products.iloc[0] / df['Total_Liquido'].sum() * 100, 2)
                }
            
            # Elasticidade de pre√ßo usando benchmarks consolidados
            price_elasticity = self.get_jewelry_industry_benchmarks()['price_elasticity']
            kpis['price_elasticity'] = price_elasticity
            
            return kpis
            
        except Exception as e:
            return {'error': f"Erro nos KPIs de produtos v3.0: {str(e)}"}
    
    def _calculate_benchmark_comparison_v3(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Compara√ß√£o com benchmarks usando mixin consolidado."""
        print("üìà Comparando com benchmarks do setor...")
        
        try:
            # Preparar m√©tricas atuais
            current_metrics = {
                'aov': df['Total_Liquido'].mean(),
                'gross_margin': df['Margem_Percentual'].mean() if 'Margem_Percentual' in df.columns else 58.0
            }
            
            # Usar mixin para compara√ß√£o
            benchmark_comparison = self.compare_with_benchmarks(current_metrics)
            
            return benchmark_comparison
            
        except Exception as e:
            return {'error': f"Erro na compara√ß√£o com benchmarks: {str(e)}"}
    
    def _generate_intelligent_alerts(self, df: pd.DataFrame, kpis: Dict[str, Any]) -> List[str]:
        """Gerar alertas inteligentes baseados nos KPIs calculados."""
        alerts = []
        
        try:
            # Alertas financeiros
            if 'financeiros' in kpis:
                fin = kpis['financeiros']
                
                # Alertas de margem
                if 'margem_analysis' in fin:
                    margem_media = fin['margem_analysis'].get('margem_percentual_media', 0)
                    produtos_baixa_margem = fin['margem_analysis'].get('produtos_baixa_margem', 0)
                    
                    if margem_media < 25:
                        alerts.append("üö® CR√çTICO: Margem m√©dia muito baixa (<25%) - A√ß√£o imediata necess√°ria")
                    elif margem_media < 40:
                        alerts.append("‚ö†Ô∏è ATEN√á√ÉO: Margem m√©dia abaixo do ideal (<40%) - Revisar precifica√ß√£o")
                    
                    if produtos_baixa_margem > 0:
                        alerts.append(f"üìâ MARGEM: {produtos_baixa_margem} produtos com margem <30% - Revisar pre√ßos")
                
                # Alertas de crescimento
                if 'growth_analysis' in fin:
                    growth_rate = fin['growth_analysis'].get('mom_growth_rate', 0)
                    if growth_rate < -20:
                        alerts.append("üö® CR√çTICO: Queda de vendas >20% no m√™s - A√ß√£o imediata necess√°ria")
                    elif growth_rate < -10:
                        alerts.append("‚ö†Ô∏è DECL√çNIO: Queda de vendas detectada - Investigar causas")
            
            # Alertas operacionais
            if 'operacionais' in kpis:
                op = kpis['operacionais']
                
                # Alertas de concentra√ß√£o
                if 'concentration_analysis' in op:
                    concentration = op['concentration_analysis'].get('concentration_80_20_pct', 0)
                    if concentration > 90:
                        alerts.append("üéØ RISCO: Concentra√ß√£o extrema de vendas (>90%) - Diversificar portf√≥lio")
                    elif concentration > 80:
                        alerts.append("‚ö†Ô∏è CONCENTRA√á√ÉO: Alta depend√™ncia de poucos produtos - Monitorar")
                
                # Alertas de turnover de estoque
                if 'inventory_turnover' in op and 'error' not in op['inventory_turnover']:
                    turnover_data = op['inventory_turnover']
                    produtos_excesso = turnover_data.get('produtos_excesso_estoque', 0)
                    produtos_baixo = turnover_data.get('produtos_baixo_estoque', 0)
                    
                    if produtos_excesso > 0:
                        alerts.append(f"üì¶ ESTOQUE: {produtos_excesso} produtos com excesso - Implementar liquida√ß√£o")
                    if produtos_baixo > 0:
                        alerts.append(f"‚ö†Ô∏è REPOSI√á√ÉO: {produtos_baixo} produtos precisam reposi√ß√£o urgente")
            
            # Alertas de benchmarks
            if 'benchmarks' in kpis and 'benchmark_comparisons' in kpis['benchmarks']:
                comparisons = kpis['benchmarks']['benchmark_comparisons']
                for metric, comparison in comparisons.items():
                    if comparison.get('status') == 'Cr√≠tico':
                        alerts.append(f"üö® BENCHMARK: {metric.upper()} em n√≠vel cr√≠tico - A√ß√£o urgente")
            
            return alerts[:8]  # Limitar a 8 alertas mais cr√≠ticos
            
        except Exception as e:
            return [f"‚ö†Ô∏è Erro na gera√ß√£o de alertas: {str(e)}"]
    
    def _generate_business_insights_v3(self, df: pd.DataFrame, kpis: Dict[str, Any]) -> List[str]:
        """Gerar insights de neg√≥cio baseados nos KPIs calculados."""
        insights = []
        
        try:
            # Insights financeiros
            if 'financeiros' in kpis:
                fin = kpis['financeiros']
                aov = fin.get('aov', 0)
                
                if aov > 2500:
                    insights.append("üíé AOV excelente (>R$2.500) - Posicionamento premium bem-sucedido")
                elif aov < 1000:
                    insights.append("üìà AOV baixo (<R$1.000) - Oportunidade para up-sell e produtos premium")
                
                if 'growth_analysis' in fin:
                    growth = fin['growth_analysis'].get('mom_growth_rate', 0)
                    if growth > 15:
                        insights.append(f"üöÄ Crescimento forte ({growth:.1f}%) - Manter estrat√©gias atuais")
                    elif growth > 5:
                        insights.append(f"üìä Crescimento saud√°vel ({growth:.1f}%) - Bom desempenho")
                
                if 'category_performance' in fin:
                    top_category = fin['category_performance'].get('top_category', 'N/A')
                    concentration = fin['category_performance'].get('category_concentration', 0)
                    insights.append(f"üèÜ Categoria l√≠der: {top_category} ({concentration:.1f}% da receita)")
            
            # Insights operacionais
            if 'operacionais' in kpis:
                op = kpis['operacionais']
                
                if 'weekday_performance' in op:
                    best_day = op['weekday_performance'].get('best_day', 'N/A')
                    insights.append(f"üìÖ Melhor dia da semana: {best_day}")
                
                if 'seasonality' in op:
                    peak_season = op['seasonality'].get('peak_season', 'N/A')
                    if peak_season != 'Normal':
                        insights.append(f"üéÑ Pico sazonal identificado: {peak_season}")
            
            # Insights de produtos
            if 'produtos' in kpis:
                prod = kpis['produtos']
                
                if 'bcg_matrix' in prod and 'distribution' in prod['bcg_matrix']:
                    bcg_dist = prod['bcg_matrix']['distribution']
                    stars_count = bcg_dist.get('Stars', 0)
                    total_products = sum(bcg_dist.values())
                    if stars_count > 0:
                        stars_pct = stars_count / total_products * 100
                        insights.append(f"‚≠ê {stars_pct:.1f}% dos produtos s√£o Stars na matriz BCG")
            
            return insights[:10]  # Top 10 insights mais relevantes
            
        except Exception as e:
            return [f"‚ö†Ô∏è Erro na gera√ß√£o de insights: {str(e)}"]
    
    def _integrate_statistical_insights(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Integrar insights de an√°lises estat√≠sticas (placeholder para integra√ß√£o futura)."""
        try:
            # Placeholder para integra√ß√£o com Statistical Analysis Tool
            # Esta integra√ß√£o ser√° implementada ap√≥s refatora√ß√£o do Statistical Tool
            
            integration_status = {
                'status': 'placeholder',
                'available_analyses': [
                    'demographic_patterns',
                    'geographic_performance', 
                    'correlation_analysis',
                    'clustering_analysis'
                ],
                'message': 'Integra√ß√£o com Statistical Tool ser√° ativada na v3.1'
            }
            
            return integration_status
            
        except Exception as e:
            return {'error': f"Erro na integra√ß√£o estat√≠stica: {str(e)}"}
    
    # M√©todos auxiliares simplificados
    def _calculate_growth_acceleration_v3(self, monthly_revenue: pd.Series) -> float:
        """Calcular acelera√ß√£o do crescimento."""
        if len(monthly_revenue) < 3:
            return 0
        growth_rates = monthly_revenue.pct_change()
        acceleration = growth_rates.diff().iloc[-1]
        return round(acceleration * 100, 2)
    
    def _calculate_temporal_performance_v3(self, df: pd.DataFrame, periodo: str) -> Dict[str, Any]:
        """Performance temporal simplificada."""
        temporal = {}
        
        # Performance por trimestre
        quarterly = df.groupby(df['Data'].dt.quarter)['Total_Liquido'].sum()
        temporal['quarterly_revenue'] = quarterly.to_dict()
        temporal['best_quarter'] = quarterly.idxmax()
        
        return temporal
    
    def _calculate_inventory_turnover_v3(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Giro de estoque usando dados preparados."""
        try:
            if 'Turnover_Estoque' in df.columns:
                turnover_stats = {
                    'turnover_medio': round(df['Turnover_Estoque'].mean(), 2),
                    'produtos_alto_turnover': len(df[df['Turnover_Estoque'] > df['Turnover_Estoque'].quantile(0.8)]),
                    'produtos_baixo_turnover': len(df[df['Turnover_Estoque'] < df['Turnover_Estoque'].quantile(0.2)])
                }
                
                # Alertas baseados nos dias de estoque
                if 'Dias_Estoque' in df.columns:
                    overstock = df[df['Dias_Estoque'] > 180]
                    understock = df[df['Dias_Estoque'] < 30]
                    
                    turnover_stats['produtos_excesso_estoque'] = len(overstock)
                    turnover_stats['produtos_baixo_estoque'] = len(understock)
                    turnover_stats['valor_excesso_estoque'] = round(overstock['Total_Liquido'].sum(), 2)
                
                return turnover_stats
            else:
                return {'error': 'Dados de estoque n√£o dispon√≠veis'}
                
        except Exception as e:
            return {'error': f"Erro no c√°lculo de turnover: {str(e)}"}
    
    def _estimate_customer_metrics(self, df: pd.DataFrame) -> Dict[str, Any]:
        """Estimar m√©tricas de cliente quando n√£o h√° Codigo_Cliente."""
        # Estimativa conservadora baseada em padr√µes do setor
        high_value_threshold = 2000
        high_value_sales = df[df['Total_Liquido'] > high_value_threshold]
        low_value_sales = df[df['Total_Liquido'] <= high_value_threshold]
        
        estimated_unique_customers = len(high_value_sales) + (len(low_value_sales) * 0.7)
        
        # CLV estimado
        avg_purchase_value = df['Total_Liquido'].mean()
        estimated_annual_purchases = 2.3  # Benchmark do setor
        estimated_lifetime_years = 3.5
        estimated_clv = avg_purchase_value * estimated_annual_purchases * estimated_lifetime_years
        
        return {
            'estimated_unique_customers': int(estimated_unique_customers),
            'estimated_clv': round(estimated_clv, 2),
            'avg_purchase_value': round(avg_purchase_value, 2),
            'estimation_method': 'Industry benchmarks'
        }
    
    def _calculate_gini_coefficient(self, values: np.ndarray) -> float:
        """Calcular coeficiente de Gini."""
        if len(values) == 0:
            return 0
        sorted_values = np.sort(values)
        n = len(values)
        cumsum = np.cumsum(sorted_values)
        return round((n + 1 - 2 * np.sum(cumsum) / cumsum[-1]) / n, 3) 
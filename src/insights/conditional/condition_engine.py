#!/usr/bin/env python
"""
ETAPA 4 - ENGINE DE CONDI√á√ïES
Motor de execu√ß√£o para avalia√ß√£o de condi√ß√µes inteligentes
"""

import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from dataclasses import dataclass

from .execution_conditions import ExecutionCondition, ConditionResult, ConditionType

# Configura√ß√£o de logging
engine_logger = logging.getLogger('condition_engine')
engine_logger.setLevel(logging.INFO)

@dataclass
class ConditionEngineResult:
    """Resultado da avalia√ß√£o do engine"""
    should_execute: bool
    overall_confidence: float
    primary_reason: str
    condition_results: List[ConditionResult]
    execution_recommendation: str
    metadata: Dict[str, Any]

class ConditionEngine:
    """Motor de avalia√ß√£o de condi√ß√µes"""
    
    def __init__(self, 
                 min_confidence_threshold: float = 0.5,
                 require_all_conditions: bool = False):
        self.min_confidence_threshold = min_confidence_threshold
        self.require_all_conditions = require_all_conditions
        self.conditions: List[ExecutionCondition] = []
        self.evaluation_history: List[ConditionEngineResult] = []
        
        engine_logger.info("üîß ConditionEngine inicializado")
    
    def add_condition(self, condition: ExecutionCondition):
        """Adicionar condi√ß√£o ao engine"""
        self.conditions.append(condition)
        engine_logger.info(f"‚ûï Condi√ß√£o adicionada: {condition.name} ({condition.condition_type.value})")
    
    def remove_condition(self, condition_name: str) -> bool:
        """Remover condi√ß√£o pelo nome"""
        original_count = len(self.conditions)
        self.conditions = [c for c in self.conditions if c.name != condition_name]
        removed = len(self.conditions) < original_count
        
        if removed:
            engine_logger.info(f"‚ûñ Condi√ß√£o removida: {condition_name}")
        
        return removed
    
    def evaluate_all(self, context: Dict[str, Any]) -> ConditionEngineResult:
        """Avaliar todas as condi√ß√µes"""
        try:
            if not self.conditions:
                # Nenhuma condi√ß√£o = execu√ß√£o livre
                result = ConditionEngineResult(
                    should_execute=True,
                    overall_confidence=1.0,
                    primary_reason="No conditions configured - execution allowed",
                    condition_results=[],
                    execution_recommendation="Execute immediately",
                    metadata={"no_conditions": True}
                )
                self.evaluation_history.append(result)
                return result
            
            # Avaliar cada condi√ß√£o
            condition_results = []
            for condition in self.conditions:
                try:
                    result = condition.evaluate(context)
                    condition_results.append(result)
                except Exception as e:
                    # Condi√ß√£o com erro - criar resultado padr√£o
                    error_result = ConditionResult(
                        should_execute=False,
                        confidence=0.0,
                        reason=f"Error in condition {condition.name}: {e}",
                        metadata={"error": str(e)},
                        condition_type=condition.condition_type
                    )
                    condition_results.append(error_result)
                    engine_logger.error(f"‚ùå Erro na condi√ß√£o {condition.name}: {e}")
            
            # Analisar resultados
            analysis = self._analyze_results(condition_results)
            
            # Construir resultado final
            final_result = ConditionEngineResult(
                should_execute=analysis["should_execute"],
                overall_confidence=analysis["overall_confidence"],
                primary_reason=analysis["primary_reason"],
                condition_results=condition_results,
                execution_recommendation=analysis["recommendation"],
                metadata=analysis["metadata"]
            )
            
            # Salvar no hist√≥rico
            self.evaluation_history.append(final_result)
            
            engine_logger.info(
                f"üéØ Avalia√ß√£o conclu√≠da: execute={final_result.should_execute}, "
                f"confidence={final_result.overall_confidence:.2f}"
            )
            
            return final_result
            
        except Exception as e:
            engine_logger.error(f"‚ùå Erro na avalia√ß√£o do engine: {e}")
            error_result = ConditionEngineResult(
                should_execute=False,
                overall_confidence=0.0,
                primary_reason=f"Engine evaluation error: {e}",
                condition_results=[],
                execution_recommendation="Do not execute due to engine error",
                metadata={"engine_error": str(e)}
            )
            self.evaluation_history.append(error_result)
            return error_result
    
    def get_condition_summary(self) -> Dict[str, Any]:
        """Obter resumo das condi√ß√µes"""
        try:
            summary = {
                "total_conditions": len(self.conditions),
                "conditions_by_type": {},
                "condition_details": [],
                "engine_config": {
                    "min_confidence_threshold": self.min_confidence_threshold,
                    "require_all_conditions": self.require_all_conditions
                }
            }
            
            # Agrupar por tipo
            for condition in self.conditions:
                condition_type = condition.condition_type.value
                if condition_type not in summary["conditions_by_type"]:
                    summary["conditions_by_type"][condition_type] = 0
                summary["conditions_by_type"][condition_type] += 1
                
                # Detalhes da condi√ß√£o
                summary["condition_details"].append({
                    "name": condition.name,
                    "type": condition_type,
                    "weight": condition.weight,
                    "evaluations": condition.evaluation_count,
                    "last_result": {
                        "should_execute": condition.last_result.should_execute if condition.last_result else None,
                        "confidence": condition.last_result.confidence if condition.last_result else None,
                        "reason": condition.last_result.reason if condition.last_result else None
                    } if condition.last_result else None
                })
            
            return summary
            
        except Exception as e:
            engine_logger.error(f"‚ùå Erro ao gerar resumo: {e}")
            return {"error": str(e)}
    
    def get_evaluation_history(self, limit: int = 10) -> List[Dict[str, Any]]:
        """Obter hist√≥rico de avalia√ß√µes"""
        try:
            # Pegar √∫ltimas avalia√ß√µes
            recent_evaluations = self.evaluation_history[-limit:] if limit > 0 else self.evaluation_history
            
            history = []
            for evaluation in recent_evaluations:
                history.append({
                    "timestamp": datetime.now().isoformat(),  # Idealmente seria salvo no momento da avalia√ß√£o
                    "should_execute": evaluation.should_execute,
                    "overall_confidence": evaluation.overall_confidence,
                    "primary_reason": evaluation.primary_reason,
                    "recommendation": evaluation.execution_recommendation,
                    "conditions_evaluated": len(evaluation.condition_results),
                    "conditions_passed": sum(1 for r in evaluation.condition_results if r.should_execute),
                    "conditions_failed": sum(1 for r in evaluation.condition_results if not r.should_execute)
                })
            
            return history
            
        except Exception as e:
            engine_logger.error(f"‚ùå Erro ao obter hist√≥rico: {e}")
            return []
    
    def _analyze_results(self, condition_results: List[ConditionResult]) -> Dict[str, Any]:
        """Analisar resultados das condi√ß√µes"""
        try:
            if not condition_results:
                return {
                    "should_execute": True,
                    "overall_confidence": 1.0,
                    "primary_reason": "No conditions to evaluate",
                    "recommendation": "Execute immediately",
                    "metadata": {}
                }
            
            # Contar sucessos e falhas
            passed_conditions = [r for r in condition_results if r.should_execute]
            failed_conditions = [r for r in condition_results if not r.should_execute]
            
            passed_count = len(passed_conditions)
            failed_count = len(failed_conditions)
            total_count = len(condition_results)
            
            # Calcular confidence geral
            if total_count > 0:
                # M√©dia ponderada das confidences
                total_confidence = sum(r.confidence for r in condition_results)
                overall_confidence = total_confidence / total_count
            else:
                overall_confidence = 0.0
            
            # Determinar se deve executar
            if self.require_all_conditions:
                # Modo rigoroso - todas as condi√ß√µes devem passar
                should_execute = failed_count == 0
                decision_logic = "require_all"
            else:
                # Modo flex√≠vel - baseado em threshold de confidence
                should_execute = overall_confidence >= self.min_confidence_threshold
                decision_logic = "confidence_threshold"
            
            # Determinar raz√£o prim√°ria
            if should_execute:
                if passed_count == total_count:
                    primary_reason = f"All {total_count} conditions passed successfully"
                else:
                    primary_reason = f"Overall confidence {overall_confidence:.2f} meets threshold {self.min_confidence_threshold:.2f}"
            else:
                if failed_count > 0:
                    failed_reasons = [r.reason for r in failed_conditions[:2]]  # Top 2 falhas
                    primary_reason = f"Conditions failed: {'; '.join(failed_reasons)}"
                else:
                    primary_reason = f"Low confidence {overall_confidence:.2f} below threshold {self.min_confidence_threshold:.2f}"
            
            # Gerar recomenda√ß√£o
            if should_execute:
                if overall_confidence > 0.8:
                    recommendation = "Execute immediately with high confidence"
                elif overall_confidence > 0.6:
                    recommendation = "Execute with moderate confidence"
                else:
                    recommendation = "Execute with caution - low confidence"
            else:
                if failed_count > total_count / 2:
                    recommendation = "Do not execute - multiple conditions failed"
                else:
                    recommendation = "Postpone execution - conditions not met"
            
            # Metadados
            metadata = {
                "total_conditions": total_count,
                "passed_conditions": passed_count,
                "failed_conditions": failed_count,
                "decision_logic": decision_logic,
                "confidence_by_type": {},
                "top_failures": [
                    {"condition": r.condition_type.value, "reason": r.reason}
                    for r in failed_conditions[:3]
                ]
            }
            
            # Confidence por tipo de condi√ß√£o
            by_type = {}
            for result in condition_results:
                ctype = result.condition_type.value
                if ctype not in by_type:
                    by_type[ctype] = []
                by_type[ctype].append(result.confidence)
            
            for ctype, confidences in by_type.items():
                metadata["confidence_by_type"][ctype] = {
                    "avg": sum(confidences) / len(confidences),
                    "count": len(confidences)
                }
            
            return {
                "should_execute": should_execute,
                "overall_confidence": overall_confidence,
                "primary_reason": primary_reason,
                "recommendation": recommendation,
                "metadata": metadata
            }
            
        except Exception as e:
            engine_logger.error(f"‚ùå Erro na an√°lise dos resultados: {e}")
            return {
                "should_execute": False,
                "overall_confidence": 0.0,
                "primary_reason": f"Analysis error: {e}",
                "recommendation": "Do not execute due to analysis error",
                "metadata": {"analysis_error": str(e)}
            }

# ========== FUN√á√ïES UTILIT√ÅRIAS ==========

def create_default_condition_engine() -> ConditionEngine:
    """Criar engine com condi√ß√µes padr√£o"""
    from .execution_conditions import PerformanceCondition, TemporalCondition, BusinessRelevanceCondition
    
    engine = ConditionEngine(min_confidence_threshold=0.6)
    
    # Adicionar condi√ß√µes padr√£o
    engine.add_condition(PerformanceCondition())
    engine.add_condition(TemporalCondition())
    engine.add_condition(BusinessRelevanceCondition(
        relevance_factors={
            "business_hours": 0.3,
            "data_freshness": 0.4,
            "user_engagement": 0.3
        }
    ))
    
    return engine

def create_performance_focused_engine() -> ConditionEngine:
    """Criar engine focado em performance"""
    from .execution_conditions import PerformanceCondition
    
    engine = ConditionEngine(
        min_confidence_threshold=0.8,
        require_all_conditions=True
    )
    
    # Condi√ß√µes rigorosas de performance
    engine.add_condition(PerformanceCondition(
        max_cpu_usage=70.0,
        max_memory_usage=75.0,
        min_disk_space_gb=10.0
    ))
    
    return engine

def create_flexible_engine() -> ConditionEngine:
    """Criar engine flex√≠vel para desenvolvimento/teste"""
    from .execution_conditions import TemporalCondition
    
    engine = ConditionEngine(
        min_confidence_threshold=0.3,
        require_all_conditions=False
    )
    
    # Apenas condi√ß√µes b√°sicas
    engine.add_condition(TemporalCondition(
        min_interval_hours=0.1  # 6 minutos
    ))
    
    return engine 
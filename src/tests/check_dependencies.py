#!/usr/bin/env python3
"""
üîç VERIFICADOR DE DEPEND√äNCIAS - ADVANCED ANALYTICS ENGINE V2.0
===============================================================

Script para verificar se todas as depend√™ncias necess√°rias
para executar os testes est√£o instaladas corretamente.
"""

import sys
import importlib
from typing import Dict, List, Tuple

def check_dependency(module_name: str, package_name: str = None) -> Tuple[bool, str]:
    """
    Verificar se uma depend√™ncia est√° dispon√≠vel.
    
    Args:
        module_name: Nome do m√≥dulo para importar
        package_name: Nome do pacote para instala√ß√£o (se diferente do m√≥dulo)
    
    Returns:
        Tuple[bool, str]: (dispon√≠vel, vers√£o ou erro)
    """
    if package_name is None:
        package_name = module_name
    
    try:
        module = importlib.import_module(module_name)
        
        # Tentar obter vers√£o
        version = "desconhecida"
        if hasattr(module, '__version__'):
            version = module.__version__
        elif hasattr(module, 'version'):
            version = module.version
        elif hasattr(module, 'VERSION'):
            version = module.VERSION
        
        return True, version
        
    except ImportError as e:
        return False, f"pip install {package_name}"

def main():
    print("üîç VERIFICADOR DE DEPEND√äNCIAS")
    print("=" * 50)
    print("Verificando depend√™ncias para Advanced Analytics Engine V2.0...")
    print()
    
    # Depend√™ncias obrigat√≥rias
    required_deps = [
        ("pandas", "pandas"),
        ("numpy", "numpy"),
        ("sklearn", "scikit-learn"),
        ("pytest", "pytest")
    ]
    
    # Depend√™ncias opcionais
    optional_deps = [
        ("xgboost", "xgboost"),
        ("scipy", "scipy"),
        ("tracemalloc", None)  # Built-in no Python 3.4+
    ]
    
    # Verificar depend√™ncias obrigat√≥rias
    print("üìã DEPEND√äNCIAS OBRIGAT√ìRIAS:")
    print("-" * 30)
    
    missing_required = []
    
    for module_name, package_name in required_deps:
        available, info = check_dependency(module_name, package_name)
        
        if available:
            print(f"‚úÖ {module_name:<15} v{info}")
        else:
            print(f"‚ùå {module_name:<15} AUSENTE - {info}")
            missing_required.append((module_name, info))
    
    print()
    
    # Verificar depend√™ncias opcionais
    print("üîß DEPEND√äNCIAS OPCIONAIS:")
    print("-" * 30)
    
    missing_optional = []
    
    for module_name, package_name in optional_deps:
        if module_name == "tracemalloc":
            # tracemalloc √© built-in
            try:
                import tracemalloc
                print(f"‚úÖ {module_name:<15} built-in")
            except ImportError:
                print(f"‚ö†Ô∏è {module_name:<15} n√£o dispon√≠vel (Python < 3.4)")
        else:
            available, info = check_dependency(module_name, package_name)
            
            if available:
                print(f"‚úÖ {module_name:<15} v{info}")
            else:
                print(f"‚ö†Ô∏è {module_name:<15} ausente - {info}")
                missing_optional.append((module_name, info))
    
    print()
    
    # Verificar vers√£o do Python
    print("üêç VERS√ÉO DO PYTHON:")
    print("-" * 20)
    python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
    
    if sys.version_info >= (3, 7):
        print(f"‚úÖ Python {python_version} (compat√≠vel)")
    elif sys.version_info >= (3, 6):
        print(f"‚ö†Ô∏è Python {python_version} (funciona, mas recomendado 3.7+)")
    else:
        print(f"‚ùå Python {python_version} (incompat√≠vel - necess√°rio 3.6+)")
    
    print()
    
    # Resumo e instru√ß√µes
    print("üìä RESUMO:")
    print("-" * 10)
    
    if not missing_required:
        print("‚úÖ Todas as depend√™ncias obrigat√≥rias est√£o instaladas!")
        
        if not missing_optional:
            print("‚úÖ Todas as depend√™ncias opcionais est√£o instaladas!")
            print("üéâ Sistema totalmente configurado para testes!")
        else:
            print("‚ö†Ô∏è Algumas depend√™ncias opcionais est√£o ausentes.")
            print("   Os testes funcionar√£o, mas com funcionalidades limitadas.")
    else:
        print("‚ùå Depend√™ncias obrigat√≥rias ausentes!")
        print("   Os testes N√ÉO funcionar√£o at√© que sejam instaladas.")
    
    print()
    
    # Instru√ß√µes de instala√ß√£o
    if missing_required or missing_optional:
        print("üõ†Ô∏è INSTRU√á√ïES DE INSTALA√á√ÉO:")
        print("-" * 30)
        
        if missing_required:
            print("Depend√™ncias obrigat√≥rias:")
            for module_name, install_cmd in missing_required:
                print(f"  {install_cmd}")
        
        if missing_optional:
            print("\nDepend√™ncias opcionais (recomendadas):")
            for module_name, install_cmd in missing_optional:
                print(f"  {install_cmd}")
        
        print("\nOu instalar todas de uma vez:")
        print("  pip install pandas numpy scikit-learn pytest xgboost scipy")
    
    print()
    
    # Verifica√ß√£o espec√≠fica do Advanced Analytics Engine
    print("üîß VERIFICA√á√ÉO DO ENGINE:")
    print("-" * 25)
    
    try:
        # Tentar diferentes caminhos de importa√ß√£o
        import os
        current_dir = os.path.dirname(os.path.abspath(__file__))
        project_root = os.path.dirname(os.path.dirname(current_dir))
        
        # Adicionar caminhos poss√≠veis
        possible_paths = [
            project_root,
            os.path.join(project_root, 'src'),
            current_dir,
            os.path.dirname(current_dir)
        ]
        
        for path in possible_paths:
            if path not in sys.path:
                sys.path.insert(0, path)
        
        # Tentar importar o engine
        try:
            from src.insights.tools.advanced.advanced_analytics_engine_tool import AdvancedAnalyticsEngineTool
        except ImportError:
            # Fallback para importa√ß√£o direta
            sys.path.insert(0, os.path.join(project_root, 'src', 'insights', 'tools', 'advanced'))
            from advanced_analytics_engine_tool import AdvancedAnalyticsEngineTool
        
        print("‚úÖ Advanced Analytics Engine V2.0 importado com sucesso!")
        
        # Verificar se pode ser instanciado
        engine = AdvancedAnalyticsEngineTool()
        print("‚úÖ Engine instanciado com sucesso!")
        
        # Verificar m√©todos principais
        main_methods = ['_run', '_load_data', '_validate_inputs', '_prepare_features']
        available_methods = [method for method in main_methods if hasattr(engine, method)]
        print(f"‚úÖ M√©todos principais dispon√≠veis: {len(available_methods)}/{len(main_methods)}")
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar engine: {e}")
        print("   Verificando localiza√ß√£o do arquivo...")
        
        # Verificar se arquivo existe
        engine_path = os.path.join(project_root, 'src', 'insights', 'tools', 'advanced', 'advanced_analytics_engine_tool.py')
        if os.path.exists(engine_path):
            print(f"   ‚úÖ Arquivo encontrado: {engine_path}")
            print("   ‚ùå Problema de importa√ß√£o de m√≥dulo")
        else:
            print(f"   ‚ùå Arquivo n√£o encontrado: {engine_path}")
            print("   Verifique se o arquivo est√° no local correto")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Engine importado mas erro na instancia√ß√£o: {e}")
    
    print()
    
    # Status final
    if not missing_required:
        print("üéØ STATUS: PRONTO PARA EXECUTAR TESTES!")
        print("   Execute: python test_advanced_analytics_engine_tool.py")
        return 0
    else:
        print("üö´ STATUS: DEPEND√äNCIAS AUSENTES")
        print("   Instale as depend√™ncias obrigat√≥rias primeiro.")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 
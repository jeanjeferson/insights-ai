#!/usr/bin/env python
"""
Teste da Etapa 4 - Otimiza√ß√µes Avan√ßadas
"""

def test_etapa4():
    print("üöÄ TESTE DA ETAPA 4 - OTIMIZA√á√ïES AVAN√áADAS")
    print("=" * 60)
    
    # 1. Teste Cache Inteligente
    print("\nüì¶ 1. Testando Cache Inteligente...")
    try:
        from src.insights.cache import IntelligentCacheSystem, CacheType
        
        cache = IntelligentCacheSystem()
        print("‚úÖ Cache System inicializado")
        
        # Testar opera√ß√µes b√°sicas
        cache.set('test_key', 'test_data', CacheType.ANALYSIS_RESULT)
        result = cache.get('test_key')
        
        if result == 'test_data':
            print("‚úÖ Cache funcionando corretamente")
        else:
            print("‚ùå Cache n√£o retornou dados corretos")
        
        # Testar estat√≠sticas
        stats = cache.get_stats()
        print(f"üìä Stats: Hit Rate: {stats.get('hit_rate_percent', 0):.1f}%")
        
    except Exception as e:
        print(f"‚ùå Erro no Cache: {e}")
    
    # 2. Teste Condi√ß√µes de Execu√ß√£o
    print("\nüîÑ 2. Testando Condi√ß√µes de Execu√ß√£o...")
    try:
        from src.insights.conditional import PerformanceCondition, TemporalCondition
        
        # Teste condi√ß√£o de performance
        perf_condition = PerformanceCondition()
        context = {}
        result = perf_condition.evaluate(context)
        
        print(f"‚úÖ Condi√ß√£o Performance: {result.should_execute} (confidence: {result.confidence:.2f})")
        print(f"   Raz√£o: {result.reason}")
        
        # Teste condi√ß√£o temporal
        temporal_condition = TemporalCondition()
        result = temporal_condition.evaluate(context)
        
        print(f"‚úÖ Condi√ß√£o Temporal: {result.should_execute} (confidence: {result.confidence:.2f})")
        print(f"   Raz√£o: {result.reason}")
        
    except Exception as e:
        print(f"‚ùå Erro nas Condi√ß√µes: {e}")
    
    # 3. Teste Analytics
    print("\nüìä 3. Testando Analytics...")
    try:
        from src.insights.cache import IntelligentCacheSystem, CacheAnalytics
        
        cache = IntelligentCacheSystem()
        analytics = CacheAnalytics(cache)
        
        # Coletar m√©tricas
        metrics = analytics.collect_metrics()
        print(f"‚úÖ M√©tricas coletadas: {len(metrics)} tipos")
        
        # Gerar insights
        insights = analytics.get_performance_insights()
        health = insights.get('overall_health', 'unknown')
        score = insights.get('optimization_score', 0)
        
        print(f"‚úÖ Health: {health}, Score: {score:.1f}")
        
    except Exception as e:
        print(f"‚ùå Erro no Analytics: {e}")
    
    print("\nüéØ ETAPA 4 - TESTE CONCLU√çDO!")

if __name__ == "__main__":
    test_etapa4() 
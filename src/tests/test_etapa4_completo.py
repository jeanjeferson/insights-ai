#!/usr/bin/env python
"""
üöÄ TESTE COMPLETO DA ETAPA 4 - OTIMIZA√á√ïES AVAN√áADAS
Teste abrangente de todos os m√≥dulos de otimiza√ß√£o implementados
"""

import time
import traceback
from datetime import datetime

def test_etapa4_completo():
    print("üöÄ TESTE COMPLETO DA ETAPA 4 - OTIMIZA√á√ïES AVAN√áADAS")
    print("=" * 80)
    
    results = {
        "passed": 0,
        "failed": 0,
        "modules_tested": []
    }
    
    # 1. Teste OptimizationController
    print("\nüéØ 1. Testando OptimizationController...")
    try:
        from src.insights.optimization import OptimizationController, OptimizationConfig, OptimizationMode
        
        config = OptimizationConfig(
            mode=OptimizationMode.BALANCED,
            enable_auto_scaling=False,  # Desabilitar para teste inicial
            enable_resource_prediction=False
        )
        
        controller = OptimizationController(config)
        status = controller.get_status()
        
        print(f"‚úÖ OptimizationController inicializado")
        print(f"   Status: {status['status']}")
        print(f"   Modo: {status['mode']}")
        print(f"   Otimiza√ß√µes ativas: {status['active_optimizations']}")
        
        results["passed"] += 1
        results["modules_tested"].append("OptimizationController")
        
    except Exception as e:
        print(f"‚ùå Erro no OptimizationController: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 2. Teste AutoScaler
    print("\nüìà 2. Testando AutoScaler...")
    try:
        from src.insights.optimization import AutoScaler
        
        auto_scaler = AutoScaler()
        auto_scaler.start_monitoring()
        
        # Aguardar alguns segundos para coletar m√©tricas
        time.sleep(3)
        
        status = auto_scaler.get_current_status()
        print(f"‚úÖ AutoScaler funcionando")
        print(f"   Ativo: {status['is_active']}")
        print(f"   CPU atual: {status['current_metrics']['cpu_percent']:.1f}%")
        print(f"   Mem√≥ria atual: {status['current_metrics']['memory_percent']:.1f}%")
        
        auto_scaler.stop_monitoring()
        
        results["passed"] += 1
        results["modules_tested"].append("AutoScaler")
        
    except Exception as e:
        print(f"‚ùå Erro no AutoScaler: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 3. Teste ResourceManager
    print("\nüîß 3. Testando ResourceManager...")
    try:
        from src.insights.optimization import ResourceManager
        from src.insights.optimization.resource_manager import ResourceLimits
        
        limits = ResourceLimits(
            max_memory_mb=512,
            max_threads=20,
            max_connections=50
        )
        
        resource_manager = ResourceManager(limits)
        resource_manager.start_monitoring()
        
        # Aguardar alguns segundos para coletar m√©tricas
        time.sleep(3)
        
        usage = resource_manager.get_current_usage()
        print(f"‚úÖ ResourceManager funcionando")
        print(f"   Mem√≥ria: {usage['memory']['current_mb']:.1f}MB de {usage['memory']['limit_mb']}MB")
        print(f"   Threads: {usage['threads']['current']} de {usage['threads']['limit']}")
        print(f"   Utiliza√ß√£o mem√≥ria: {usage['memory']['utilization_percent']:.1f}%")
        
        # Testar limpeza for√ßada
        resource_manager.force_cleanup()
        print(f"   Limpeza for√ßada executada")
        
        resource_manager.stop_monitoring()
        
        results["passed"] += 1
        results["modules_tested"].append("ResourceManager")
        
    except Exception as e:
        print(f"‚ùå Erro no ResourceManager: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 4. Teste PredictiveEngine
    print("\nüîÆ 4. Testando PredictiveEngine...")
    try:
        from src.insights.optimization import PredictiveEngine
        from src.insights.optimization.predictive_engine import (
            PredictionInput, PredictionType, PredictionTimeframe
        )
        
        predictive_engine = PredictiveEngine()
        
        # Adicionar alguns dados de treinamento simulados
        for i in range(10):
            training_data = PredictionInput(
                timestamp=datetime.now(),
                cpu_percent=50.0 + (i * 2),
                memory_percent=60.0 + (i * 1.5),
                execution_time_ms=1000.0 + (i * 100),
                cache_hit_rate=80.0 - (i * 0.5),
                request_count=100 + (i * 10),
                active_flows=5 + i,
                system_load=0.5 + (i * 0.05),
                hour_of_day=datetime.now().hour,
                day_of_week=datetime.now().weekday(),
                is_weekend=datetime.now().weekday() >= 5
            )
            predictive_engine.add_training_data(training_data)
        
        print(f"‚úÖ PredictiveEngine inicializado")
        print(f"   Dados de treinamento: {len(predictive_engine.training_data)}")
        print(f"   Modelos ML inicializados: {len(predictive_engine.prediction_models)}")
        
        # Testar detec√ß√£o de anomalias
        current_data = PredictionInput(
            timestamp=datetime.now(),
            cpu_percent=95.0,  # CPU alta para testar anomalia
            memory_percent=90.0,  # Mem√≥ria alta
            execution_time_ms=5000.0,
            cache_hit_rate=30.0,
            request_count=500,
            active_flows=20,
            system_load=0.9,
            hour_of_day=datetime.now().hour,
            day_of_week=datetime.now().weekday(),
            is_weekend=datetime.now().weekday() >= 5
        )
        
        anomaly_result = predictive_engine.detect_anomalies(current_data)
        print(f"   Teste de anomalia:")
        print(f"     √â anomalia: {anomaly_result.is_anomaly}")
        print(f"     Severidade: {anomaly_result.severity}")
        print(f"     Descri√ß√£o: {anomaly_result.description}")
        
        # Testar previs√£o do sistema
        forecast = predictive_engine.get_system_forecast(hours_ahead=2)
        if forecast.get("status") != "no_data":
            print(f"   Previs√£o do sistema:")
            print(f"     Score de sa√∫de: {forecast['system_health_score']:.1f}")
            print(f"     Recomenda√ß√µes: {len(forecast['recommendations'])}")
        
        results["passed"] += 1
        results["modules_tested"].append("PredictiveEngine")
        
    except Exception as e:
        print(f"‚ùå Erro no PredictiveEngine: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 5. Teste de Integra√ß√£o - OptimizationController com novos m√≥dulos
    print("\nüîó 5. Testando Integra√ß√£o Completa...")
    try:
        from src.insights.optimization import OptimizationController, OptimizationConfig, OptimizationMode
        
        # Configura√ß√£o com todos os m√≥dulos habilitados
        config = OptimizationConfig(
            mode=OptimizationMode.BALANCED,
            enable_auto_scaling=True,
            enable_resource_prediction=True,
            enable_ml_optimization=True
        )
        
        controller = OptimizationController(config)
        
        # Aguardar inicializa√ß√£o dos sistemas
        time.sleep(5)
        
        status = controller.get_status()
        print(f"‚úÖ Integra√ß√£o completa funcionando")
        print(f"   Status: {status['status']}")
        print(f"   Uptime: {status['uptime_seconds']:.1f}s")
        print(f"   Melhoria de performance: {status['performance_improvement']:.1f}%")
        print(f"   Economia de recursos: {status['resource_savings']:.1f}%")
        
        # Testar trigger manual de otimiza√ß√£o
        trigger_result = controller.trigger_optimization("memory_optimization", "high")
        print(f"   Trigger manual: {'‚úÖ' if trigger_result else '‚ùå'}")
        
        # Shutdown graceful
        controller.shutdown()
        print(f"   Shutdown graceful: ‚úÖ")
        
        results["passed"] += 1
        results["modules_tested"].append("IntegracaoCompleta")
        
    except Exception as e:
        print(f"‚ùå Erro na Integra√ß√£o: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 6. Teste Cache Integration (se ainda n√£o testado)
    print("\nüíæ 6. Testando CacheIntegration...")
    try:
        from src.insights.optimization import CacheIntegration
        
        cache_integration = CacheIntegration()
        
        # Testar an√°lise de performance do cache
        performance_analysis = cache_integration.analyze_cache_performance()
        cache_integration.implement_intelligent_prefetching()
        
        # Obter estat√≠sticas
        stats = cache_integration.get_optimization_stats()
        print(f"‚úÖ CacheIntegration funcionando")
        print(f"   An√°lise de performance: {performance_analysis['status']}")
        print(f"   Otimiza√ß√µes aplicadas: {stats['optimizations_applied']}")
        print(f"   Prefetching ativo: {stats['prefetching_active']}")
        
        results["passed"] += 1
        results["modules_tested"].append("CacheIntegration")
        
    except Exception as e:
        print(f"‚ùå Erro no CacheIntegration: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # 7. Teste PerformanceAnalytics
    print("\nüìä 7. Testando PerformanceAnalytics...")
    try:
        from src.insights.optimization import PerformanceAnalytics
        
        analytics = PerformanceAnalytics()
        
        # Coletar m√©tricas atuais
        current_metrics = analytics.collect_current_metrics()
        
        # Gerar insights de performance  
        insights = analytics.get_performance_insights()
        
        # Detectar gargalos
        bottlenecks = analytics.detect_bottlenecks()
        
        print(f"‚úÖ PerformanceAnalytics funcionando")
        print(f"   M√©tricas coletadas: {len(current_metrics)}")
        print(f"   Score de performance: {insights.get('overall_performance_score', 0):.1f}")
        print(f"   Gargalos detectados: {len(bottlenecks)}")
        
        results["passed"] += 1
        results["modules_tested"].append("PerformanceAnalytics")
        
    except Exception as e:
        print(f"‚ùå Erro no PerformanceAnalytics: {e}")
        traceback.print_exc()
        results["failed"] += 1
    
    # Resultado Final
    print("\n" + "=" * 80)
    print("üìã RESULTADO FINAL DO TESTE")
    print("=" * 80)
    
    total_tests = results["passed"] + results["failed"]
    success_rate = (results["passed"] / total_tests * 100) if total_tests > 0 else 0
    
    print(f"‚úÖ Testes Passaram: {results['passed']}")
    print(f"‚ùå Testes Falharam: {results['failed']}")
    print(f"üìä Taxa de Sucesso: {success_rate:.1f}%")
    print(f"üîß M√≥dulos Testados: {', '.join(results['modules_tested'])}")
    
    if results["failed"] == 0:
        print("\nüéâ PARAB√âNS! Todos os testes da Etapa 4 passaram!")
        print("üöÄ Sistema de otimiza√ß√£o avan√ßada est√° 100% funcional!")
    else:
        print(f"\n‚ö†Ô∏è {results['failed']} teste(s) falharam. Revise os logs acima.")
    
    print("\n" + "=" * 80)
    print("üìñ M√ìDULOS IMPLEMENTADOS NA ETAPA 4:")
    print("=" * 80)
    print("‚úÖ OptimizationController - Controlador central de otimiza√ß√£o")
    print("‚úÖ AutoScaler - Sistema de auto-scaling inteligente") 
    print("‚úÖ ResourceManager - Gerenciador de recursos do sistema")
    print("‚úÖ PredictiveEngine - Engine de predi√ß√£o baseado em ML")
    print("‚úÖ CacheIntegration - Integra√ß√£o avan√ßada com cache")
    print("‚úÖ PerformanceAnalytics - Analytics de performance")
    print("‚úÖ FlowOptimizer - Otimizador de flows")
    print("‚úÖ MLOptimizer - Otimizador baseado em ML")
    
    return results

if __name__ == "__main__":
    test_etapa4_completo() 
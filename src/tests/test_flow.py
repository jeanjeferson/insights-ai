#!/usr/bin/env python
"""
üß™ TESTES DE VALIDA√á√ÉO DO INSIGHTS-AI FLOW

Este arquivo testa:
- Funcionalidade b√°sica do Flow
- Integra√ß√£o com sistema existente 
- Compatibilidade entre sistemas
- Performance e monitoramento
"""

import unittest
import sys
import time
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

# Importar m√≥dulos para teste
from insights.flow_main import InsightsFlow, criar_flow_com_parametros
from insights.flow_integration import InsightsRunner, run_insights

class TestInsightsFlow(unittest.TestCase):
    """Testes para a classe InsightsFlow"""
    
    def setUp(self):
        """Configurar ambiente de teste"""
        self.data_inicio = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
        self.data_fim = datetime.now().strftime('%Y-%m-%d')
    
    def test_flow_creation(self):
        """Testar cria√ß√£o b√°sica do Flow"""
        try:
            flow = criar_flow_com_parametros(
                self.data_inicio, 
                self.data_fim, 
                "completo"
            )
            
            # Verificar se foi criado corretamente
            self.assertIsInstance(flow, InsightsFlow)
            self.assertEqual(flow.state.data_inicio, self.data_inicio)
            self.assertEqual(flow.state.data_fim, self.data_fim)
            self.assertEqual(flow.state.modo_execucao, "completo")
            
            print("‚úÖ Test Flow Creation: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Flow Creation: FALHOU - {e}")
            self.fail(f"Falha na cria√ß√£o do Flow: {e}")
    
    def test_flow_state_structure(self):
        """Testar estrutura do estado do Flow"""
        try:
            flow = criar_flow_com_parametros(self.data_inicio, self.data_fim)
            
            # Verificar campos obrigat√≥rios do estado
            required_fields = [
                'data_inicio', 'data_fim', 'modo_execucao', 'flow_id',
                'fase_atual', 'progresso_percent', 'dados_extraidos',
                'qualidade_dados', 'analises_concluidas', 'erros_detectados'
            ]
            
            for field in required_fields:
                self.assertTrue(hasattr(flow.state, field), f"Campo {field} n√£o encontrado no estado")
            
            # Verificar valores iniciais
            self.assertEqual(flow.state.fase_atual, "inicializando")
            self.assertEqual(flow.state.progresso_percent, 0.0)
            self.assertFalse(flow.state.dados_extraidos)
            self.assertEqual(len(flow.state.analises_concluidas), 0)
            
            print("‚úÖ Test Flow State Structure: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Flow State Structure: FALHOU - {e}")
            self.fail(f"Falha na estrutura do estado: {e}")
    
    def test_flow_validation(self):
        """Testar valida√ß√£o de inputs do Flow"""
        try:
            # Teste com dados v√°lidos
            flow = criar_flow_com_parametros(self.data_inicio, self.data_fim)
            resultado = flow.inicializar_flow()
            self.assertEqual(resultado, "inputs_validados")
            
            # Teste com dados inv√°lidos
            flow_invalid = InsightsFlow()
            flow_invalid.state.data_inicio = ""
            flow_invalid.state.data_fim = ""
            resultado_invalid = flow_invalid.inicializar_flow()
            self.assertEqual(resultado_invalid, "erro_inputs")
            
            print("‚úÖ Test Flow Validation: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Flow Validation: FALHOU - {e}")
            self.fail(f"Falha na valida√ß√£o: {e}")
    
    def test_status_monitoring(self):
        """Testar sistema de monitoramento de status"""
        try:
            flow = criar_flow_com_parametros(self.data_inicio, self.data_fim)
            
            # Testar m√©todo de status
            status = flow.get_status_detalhado()
            
            required_status_fields = [
                'flow_id', 'fase_atual', 'progresso_percent', 'tempo_decorrido',
                'dados_extraidos', 'analises_concluidas', 'erros_count'
            ]
            
            for field in required_status_fields:
                self.assertIn(field, status, f"Campo {field} n√£o encontrado no status")
            
            print("‚úÖ Test Status Monitoring: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Status Monitoring: FALHOU - {e}")
            self.fail(f"Falha no monitoramento: {e}")

class TestInsightsIntegration(unittest.TestCase):
    """Testes para a integra√ß√£o h√≠brida"""
    
    def setUp(self):
        """Configurar ambiente de teste"""
        self.data_inicio = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        self.data_fim = datetime.now().strftime('%Y-%m-%d')
    
    def test_runner_creation(self):
        """Testar cria√ß√£o do runner h√≠brido"""
        try:
            runner = InsightsRunner()
            
            # Verificar atributos
            self.assertEqual(runner.modo_preferido, "auto")
            self.assertTrue(runner.fallback_ativo)
            self.assertTrue(runner.monitoramento_ativo)
            
            print("‚úÖ Test Runner Creation: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Runner Creation: FALHOU - {e}")
            self.fail(f"Falha na cria√ß√£o do runner: {e}")
    
    def test_criteria_analysis(self):
        """Testar an√°lise de crit√©rios para escolha do modo"""
        try:
            runner = InsightsRunner()
            
            # Testar an√°lise de crit√©rios
            criterios = runner._analisar_criterios_execucao(
                self.data_inicio, 
                self.data_fim,
                modo_rapido=True
            )
            
            # Verificar estrutura do resultado
            self.assertIn('usar_flow', criterios)
            self.assertIn('razoes', criterios)
            self.assertIsInstance(criterios['usar_flow'], bool)
            self.assertIsInstance(criterios['razoes'], list)
            
            print("‚úÖ Test Criteria Analysis: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Criteria Analysis: FALHOU - {e}")
            self.fail(f"Falha na an√°lise de crit√©rios: {e}")
    
    @patch('insights.flow_integration.CrewTradicional')
    def test_crew_fallback(self, mock_crew):
        """Testar fallback para crew tradicional"""
        try:
            # Configurar mock
            mock_instance = MagicMock()
            mock_crew.return_value = mock_instance
            mock_instance.crew.return_value.kickoff.return_value = "resultado_mock"
            mock_instance.agents = ["agent1", "agent2"]
            mock_instance.tasks = ["task1", "task2"]
            
            runner = InsightsRunner()
            
            # For√ßar uso do crew
            resultado = runner._executar_com_crew(
                self.data_inicio, 
                self.data_fim,
                monitoramento_detalhado=False
            )
            
            # Verificar resultado
            self.assertEqual(resultado['status'], 'sucesso')
            self.assertEqual(resultado['modo_execucao'], 'crew')
            self.assertIn('resultado_principal', resultado)
            
            print("‚úÖ Test Crew Fallback: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Crew Fallback: FALHOU - {e}")
            self.fail(f"Falha no fallback: {e}")

class TestPerformanceAndLogging(unittest.TestCase):
    """Testes de performance e logging"""
    
    def test_logging_setup(self):
        """Testar configura√ß√£o de logging"""
        try:
            from insights.flow_main import setup_flow_logging
            
            # Testar setup de logging
            logger, log_file = setup_flow_logging()
            
            # Verificar se logger foi criado
            self.assertIsNotNone(logger)
            self.assertIsNotNone(log_file)
            
            # Testar escrita de log
            logger.info("Teste de logging")
            
            print("‚úÖ Test Logging Setup: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Logging Setup: FALHOU - {e}")
            self.fail(f"Falha no logging: {e}")
    
    def test_performance_monitoring(self):
        """Testar monitoramento de performance"""
        try:
            flow = criar_flow_com_parametros(
                (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                datetime.now().strftime('%Y-%m-%d')
            )
            
            # Simular execu√ß√£o r√°pida
            start_time = time.time()
            flow.inicializar_flow()
            execution_time = time.time() - start_time
            
            # Verificar que foi executado rapidamente
            self.assertLess(execution_time, 5.0, "Inicializa√ß√£o muito lenta")
            
            # Verificar m√©tricas de performance no estado
            self.assertIn('tempo_por_analise', flow.state.__dict__)
            
            print("‚úÖ Test Performance Monitoring: PASSOU")
            
        except Exception as e:
            print(f"‚ùå Test Performance Monitoring: FALHOU - {e}")
            self.fail(f"Falha no monitoramento de performance: {e}")

def run_basic_flow_test():
    """Teste b√°sico de funcionamento do Flow (sem unittest)"""
    print("üß™ EXECUTANDO TESTE B√ÅSICO DO FLOW")
    print("=" * 50)
    
    try:
        # Configurar per√≠odo de teste pequeno
        data_fim = datetime.now().strftime('%Y-%m-%d')
        data_inicio = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        
        print(f"üìÖ Per√≠odo de teste: {data_inicio} a {data_fim}")
        
        # Testar cria√ß√£o do Flow
        print("üîß Testando cria√ß√£o do Flow...")
        flow = criar_flow_com_parametros(data_inicio, data_fim, "completo")
        print(f"‚úÖ Flow criado: ID {flow.state.flow_id}")
        
                            # Testar inicializa√ß√£o
        print("üöÄ Testando inicializa√ß√£o...")
        try:
            resultado_init = flow.inicializar_flow()
            print(f"‚úÖ Inicializa√ß√£o: {resultado_init}")
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return False
        
        # Testar status
        print("üìä Testando monitoramento...")
        status = flow.get_status_detalhado()
        print(f"‚úÖ Status obtido: {status['fase_atual']}")
        
        # Testar sistema h√≠brido
        print("üîÑ Testando sistema h√≠brido...")
        runner = InsightsRunner()
        criterios = runner._analisar_criterios_execucao(data_inicio, data_fim)
        print(f"‚úÖ Crit√©rios analisados: {len(criterios['razoes'])} raz√µes")
        
        print("=" * 50)
        print("üéâ TESTE B√ÅSICO CONCLU√çDO COM SUCESSO!")
        return True
        
    except Exception as e:
        print(f"‚ùå TESTE B√ÅSICO FALHOU: {e}")
        return False

def run_compatibility_test():
    """Teste de compatibilidade com sistema existente"""
    print("üîó EXECUTANDO TESTE DE COMPATIBILIDADE")
    print("=" * 50)
    
    try:
        # Testar importa√ß√µes
        print("üì¶ Testando importa√ß√µes...")
        
        # Sistema Flow
        from insights.flow_main import InsightsFlow
        print("‚úÖ Flow importado")
        
        # Sistema tradicional
        from old.crew import Insights
        print("‚úÖ Crew tradicional importado")
        
        # Sistema h√≠brido
        from insights.flow_integration import run_insights
        print("‚úÖ Sistema h√≠brido importado")
        
        # Testar interface compat√≠vel
        print("üîÑ Testando interface compat√≠vel...")
        from old.main import run_with_crew, run_with_flow
        print("‚úÖ Interfaces compat√≠veis dispon√≠veis")
        
        print("=" * 50)
        print("üéâ TESTE DE COMPATIBILIDADE PASSOU!")
        return True
        
    except Exception as e:
        print(f"‚ùå TESTE DE COMPATIBILIDADE FALHOU: {e}")
        return False

if __name__ == "__main__":
    print("üß™ INICIANDO TESTES DO INSIGHTS-AI FLOW")
    print("=" * 60)
    
    # Executar testes b√°sicos primeiro
    basic_test_ok = run_basic_flow_test()
    print()
    
    compatibility_test_ok = run_compatibility_test()
    print()
    
    if basic_test_ok and compatibility_test_ok:
        print("üöÄ EXECUTANDO TESTES UNIT√ÅRIOS DETALHADOS")
        print("=" * 60)
        
        # Executar testes unit√°rios
        unittest.main(verbosity=2, exit=False)
        
        print("=" * 60)
        print("‚úÖ TODOS OS TESTES CONCLU√çDOS!")
        print()
        print("üéØ PR√ìXIMOS PASSOS:")
        print("   1. Execute: python main.py --mode auto")
        print("   2. Teste: python main.py --mode flow --quick")
        print("   3. Compare: python main.py --mode crew")
        print("=" * 60)
    else:
        print("‚ùå TESTES B√ÅSICOS FALHARAM - Verificar configura√ß√£o")
        sys.exit(1) 